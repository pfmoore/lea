import pytest
import operator
from lea import *
from lea.toolbox import isclose
from lea.prob_fraction import ProbFraction as PF

# All tests are made using fraction representation, in order to ease comparison
@pytest.fixture(scope="module")
def setup():
    set_prob_type('r')

def test_all_true(setup):
    (a,b) = event('1/4').new(2)
    assert P(all_true()) == PF(1)
    assert P(all_true(a)) == PF(1,4)
    assert P(all_true(a,b)) == PF(1,4**2)
    assert P(all_true(a,b,a==b)) == PF(1,4**2)
    assert P(all_true(a,b,a!=b)) == PF(0)
    assert P(all_true(a,b,True)) == PF(1,4**2)
    assert P(all_true(True,a,b)) == PF(1,4**2)
    assert P(all_true(a,b,False)) == PF(0)
    assert P(all_true(False,a,b)) == PF(0)

def test_any_true(setup):
    (a,b) = event('1/4').new(2)
    assert P(any_true()) == PF(1)
    assert P(any_true(a)) == PF(1,4)
    assert P(any_true(a,b)) == PF(7,4**2)
    assert P(any_true(a,b,a==b)) == PF(1)
    assert P(any_true(a,b,a!=b)) == PF(7,4**2)
    assert P(any_true(a,b,True)) == PF(1)
    assert P(any_true(True,a,b)) == PF(1)
    assert P(any_true(a,b,False)) == PF(7,4**2)
    assert P(any_true(False,a,b)) == PF(7,4**2)

def test_all_false(setup):
    (a,b) = event('1/4').new(2)
    assert P(all_false()) == PF(1)
    assert P(all_false(a)) == PF(3,4)
    assert P(all_false(a,b)) == PF(3**2,4**2)
    assert P(all_false(a,b,a==b)) == PF(0)
    assert P(all_false(a,b,a!=b)) == PF(3**2,4**2)
    assert P(all_false(a,b,True)) == PF(0)
    assert P(all_false(True,a,b)) == PF(0)
    assert P(all_false(a,b,False)) == PF(3**2,4**2)
    assert P(all_false(False,a,b)) == PF(3**2,4**2)

def test_any_false(setup):
    (a,b) = event('1/4').new(2)
    assert P(any_false()) == PF(1)
    assert P(any_false(a)) == PF(3,4)
    assert P(any_false(a,b)) == PF(15,4**2)
    assert P(any_false(a,b,a==b)) == PF(15,4**2)
    assert P(any_false(a,b,a!=b)) == PF(1)
    assert P(any_false(a,b,True)) == PF(15,4**2)
    assert P(any_false(True,a,b)) == PF(15,4**2)
    assert P(any_false(a,b,False)) == PF(1)
    assert P(any_false(False,a,b)) == PF(1)

def test_all_different(setup):
    (x,y,z) = interval(1,3).new(3)
    assert P(all_different()) == PF(1)
    assert P(all_different(x)) == PF(1)
    assert P(all_different(x,y)) == PF(2,3)
    assert P(all_different(x,y,z)) == PF(3*2*1,3**3)
    expected = vals(*((s,t) for s in (1,2,3) for t in (1,2,3) if s != t))
    assert joint(x,y).given(all_different(x,y)).equiv(expected)    
    expected = vals(*((s,t,u) for s in (1,2,3) for t in (1,2,3) for u in (1,2,3)
                      if s != t and t != u and s != u))
    assert joint(x,y,z).given(all_different(x,y,z)).equiv(expected)    
    (a,b,c,d) = interval(1,4).new(4)
    assert P(all_different(a,b,c,d)) == PF(4*3*2*1,4**4)
    assert P(all_different(3,a,b,c)) == PF(3*2*1,4**3)
    assert P(all_different(a,b,c,3)) == PF(3*2*1,4**3)
    expected = vals((2,3,1,1),(3,2,1,1))
    assert joint(a,b,c,d).given(all_different(a,b,c), a+b+c+d==7, c<=d).equiv(expected)

def test_all_equal(setup):
    (x,y,z) = interval(1,3).new(3)
    assert P(all_equal()) == PF(1)
    assert P(all_equal(x)) == PF(1)
    assert P(all_equal(x,y)) == PF(3,3**2)
    assert P(all_equal(x,y,z)) == PF(3,3**3)
    expected = vals(*((s,s) for s in (1,2,3)))
    assert joint(x,y).given(all_equal(x,y)).equiv(expected)    
    expected = vals(*((s,s,s) for s in (1,2,3)))
    assert joint(x,y,z).given(all_equal(x,y,z)).equiv(expected)    
    (a,b,c,d) = interval(1,4).new(4)
    assert P(all_equal(a,b,c,d)) == PF(4,4**4)
    assert P(all_equal(3,a,b,c)) == PF(1,4**3)
    assert P(all_equal(a,b,c,3)) == PF(1,4**3)

def test_all_increasing(setup):
    (x,y,z) = interval(1,3).new(3)
    assert P(all_increasing()) == PF(1)
    assert P(all_increasing(x)) == PF(1)
    assert P(all_increasing(x,y)) == PF(2,3)
    assert P(all_increasing(x,y,z)) == PF(10,27)
    expected = vals(*((s,t) for s in (1,2,3) for t in (1,2,3) if s <= t))
    assert joint(x,y).given(all_increasing(x,y)).equiv(expected)
    expected = vals(*((s,t,u) for s in (1,2,3) for t in (1,2,3) for u in (1,2,3)
                      if s <= t and t <= u))
    assert joint(x,y,z).given(all_increasing(x,y,z)).equiv(expected)
    assert P(all_strict_increasing(x,y)) == PF(1,3)
    assert P(all_strict_increasing(x,y,z)) == PF(1,27)
    expected = vals(*((s,t) for s in (1,2,3) for t in (1,2,3) if s < t))
    assert joint(x,y).given(all_strict_increasing(x,y)).equiv(expected)
    expected = vals(*((s,t,u) for s in (1,2,3) for t in (1,2,3) for u in (1,2,3)
                      if s < t and t < u))
    assert joint(x,y,z).given(all_strict_increasing(x,y,z)).equiv(expected)

def test_all_decreasing(setup):
    (x,y,z) = interval(1,3).new(3)
    assert P(all_decreasing()) == PF(1)
    assert P(all_decreasing(x)) == PF(1)
    assert P(all_decreasing(x,y)) == PF(2,3)
    assert P(all_decreasing(x,y,z)) == PF(10,27)
    expected = vals(*((s,t) for s in (1,2,3) for t in (1,2,3) if s >= t))
    assert joint(x,y).given(all_decreasing(x,y)).equiv(expected)
    expected = vals(*((s,t,u) for s in (1,2,3) for t in (1,2,3) for u in (1,2,3)
                      if s >= t and t >= u))
    assert joint(x,y,z).given(all_decreasing(x,y,z)).equiv(expected)
    assert P(all_strict_decreasing(x,y)) == PF(1,3)
    assert P(all_strict_decreasing(x,y,z)) == PF(1,27)
    expected = vals(*((s,t) for s in (1,2,3) for t in (1,2,3) if s > t))
    assert joint(x,y).given(all_strict_decreasing(x,y)).equiv(expected)
    expected = vals(*((s,t,u) for s in (1,2,3) for t in (1,2,3) for u in (1,2,3)
                      if s > t and t > u))
    assert joint(x,y,z).given(all_strict_decreasing(x,y,z)).equiv(expected)


def test_all_verify(setup):
    (a,b,c,d) = interval(1,4).new(4)
    assert P(all_verify((),operator.le,0)) == PF(1)
    assert P(all_verify((a,),operator.le,3)) == PF(3,4)
    assert P(all_verify((a,b,c),operator.le,3)) == P((a<=3)&(b<=3)&(c<=3))
    expected = joint(a,b,c).given(a<=3,b<=3,c<=3)
    assert joint(a,b,c).given(all_verify((a,b,c),operator.le,3)).equiv(expected)
    expected = joint(a,b,c,d).given(a<d,b<d,c<d)
    assert joint(a,b,c,d).given(all_verify((a,b,c),operator.lt,d)).equiv(expected)
    expected = joint(a,b,c,d).given(a>=d,b>=d,c>=d)
    assert joint(a,b,c,d).given(all_verify((a,b,c),operator.ge,d)).equiv(expected)

def test_any_verify(setup):
    (a,b,c,d) = interval(1,4).new(4)
    assert P(any_verify((),operator.le,0)) == PF(1)
    assert P(any_verify((a,),operator.le,3)) == PF(3,4)
    assert P(any_verify((a,b,c),operator.le,3)) == P((a<=3)|(b<=3)|(c<=3))
    expected = joint(a,b,c).given((a<=3)|(b<=3)|(c<=3))
    assert joint(a,b,c).given(any_verify((a,b,c),operator.le,3)).equiv(expected)
    expected = joint(a,b,c,d).given((a<d)|(b<d)|(c<d))
    assert joint(a,b,c,d).given(any_verify((a,b,c),operator.lt,d)).equiv(expected)
    expected = joint(a,b,c,d).given((a>=d)|(b>=d)|(c>=d))
    assert joint(a,b,c,d).given(any_verify((a,b,c),operator.ge,d)).equiv(expected)
